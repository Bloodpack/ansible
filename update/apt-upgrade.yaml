- hosts: all
  become: true
  vars_files:
    - /root/secrets.yml  # Original secrets file

  tasks:
    - name: Update apt packages
      apt:
        force_apt_get: true
        upgrade: yes  # Perform a regular upgrade
        update_cache: true
      register: update_result  # Register the result of the update task

    - name: Check if a reboot is required
      stat:
        path: /var/run/reboot-required
      register: reboot_required

    - name: Notify if reboot is required
      debug:
        msg: "Reboot is required"
      when: reboot_required.stat.exists

    - name: Remove dependencies that are no longer required
      apt:
        autoremove: true

    - name: Notify that the update process is finished
      debug:
        msg: "Update process completed successfully."

    - name: Check if the update was successful
      debug:
        msg: "Update was successful."
      when: update_result.changed  # Check if any changes were made during the update

    - name: Send reboot required message to Telegram
      uri:
        url: "https://api.telegram.org/bot{{ telegram_token }}/sendMessage"
        method: POST
        body: '{{ {"chat_id": chat_id, "text": "*{{ ansible_hostname }}*\n🔄 Reboot is required"} | to_json }}'
        headers:
          Content-Type: "application/json"
        return_content: yes  # Capture the response
      when: reboot_required.stat.exists

    - name: Check for held back updates
      command: apt-mark showhold
      register: held_back_updates
      changed_when: false

    - name: Send held back updates message to Telegram
      uri:
        url: "https://api.telegram.org/bot{{ telegram_token }}/sendMessage"
        method: POST
        body: '{{ {"chat_id": chat_id, "text": "*{{ ansible_hostname }}*\n⚠️ Updates are held back: " + (held_back_updates.stdout | default("None")) + "} | to_json }}'
        headers:
          Content-Type: "application/json"
        return_content: yes  # Capture the response
      when: held_back_updates.stdout | length > 0

    - name: Send success message to Telegram (when updates are installed)
      uri:
        url: "https://api.telegram.org/bot{{ telegram_token }}/sendMessage"
        method: POST
        body: '{{ {"chat_id": chat_id, "text": "*{{ ansible_hostname }}*\n✅ Update process completed successfully"} | to_json }}'
        headers:
          Content-Type: "application/json"
        return_content: yes  # Capture the response
      register: telegram_response_success
      when: update_result.changed
      check_mode: no  # Prevent skipping in check mode

    - name: Set message for no updates available
      set_fact:
        no_updates_message: "*{{ ansible_hostname }}*\nℹ️ No updates are available"
      when: not update_result.changed and held_back_updates.stdout | length == 0

    - name: Send no updates available message to Telegram
      uri:
        url: "https://api.telegram.org/bot{{ telegram_token }}/sendMessage"
        method: POST
        body: '{{ {"chat_id": chat_id, "text": no_updates_message} | to_json }}'
        headers:
          Content-Type: "application/json"
        return_content: yes  # Capture the response
      when: no_updates_message is defined
      check_mode: no  # Prevent skipping in check mode

    - name: Send no updates made message to Telegram
      uri:
        url: "https://api.telegram.org/bot{{ telegram_token }}/sendMessage"
        method: POST
        body: '{{ {"chat_id": chat_id, "text": "*{{ ansible_hostname }}*\n❌ No updates were made"} | to_json }}'
        headers:
          Content-Type: "application/json"
        return_content: yes  # Capture the response
      register: telegram_response_no_updates_made
      when: not update_result.changed and held_back_updates.stdout | length > 0
      check_mode: no  # Prevent skipping in check mode
